<?php
/**
* Copyright(c) 2014
* 日    期:2014年7月7日                                                 
* 作　  者:Tony_Ren
* E-mail  :Tony_Ren@rockhippo.net
* 文 件 名:XSession.php                                                
* 创建时间:下午2:33:14                                                
* 字符编码:UTF-8                                                   
* 脚本语言:PHP                                            
* 版本信息:$Id$                                                 
* 修改日期:$LastChangedDate$                                     
* 最后版本:$LastChangedRevision$                                 
* 修 改 者:$LastChangedBy$                                      
* 版本地址:$HeadURL$                                            
* 摘    要:session封装
*/
class XSession
{
	static private $_begin = 0;
	static private $_instance = null;
	static private $_debug = false;
	private static $_handler = null;

	public static function Init($debug=false)
	{
		self::$_instance = new self();
		self::$_debug = $debug;
		
		//$handler = new FileSessionHandler();
		//session_set_save_handler(
		//	array($handler, 'open'),
		//	array($handler, 'close'),
		//	array($handler, 'read'),
		//	array($handler, 'write'),
		//	array($handler, 'destroy'),
		//	array($handler, 'gc')
		//);
		
		// the following prevents unexpected effects when using objects as save handlers
		//register_shutdown_function('session_write_close');		
		
		session_start();
		//self::$_handler = $handler;
		
		//session_cache_limiter("private");
	}
	
	public static function ReName($oldname,$newname,$del_userid = '')
	{
		//if(!self::$_handler)self::$_handler = new FileSessionHandler();
		//if($del_userid != '')
		//{
		//	self::$_handler->destroy($del_userid);
		//}
		//session_id($newname);
		//self::$_handler->destroy($oldname);
	}

	public static function Set($name, $v) 
	{
		$_SESSION[$name] = $v;
	}
	
	/**
	 * 获得
	 * @param string $name SESSION中保存的KEY
	 * @param boolean $once true表示使用一次清空，如验证码
	 * @return mixed
	 */
	public static function Get($name, $once=false)
	{
		$v = null;
		//$sid = session_id();
		if ( isset($_SESSION[$name]) )
		{
			$v = $_SESSION[$name];
			if ( $once ) unset( $_SESSION[$name] );
		}
		return $v;
	}

	function __construct()
	{
		//self::$_begin = microtime(true);
	}

	function __Destruct()
	{
	}
}
//适用于5.4.0以下
class FileSessionHandler
{
	private $savePath;

	function open($savePath, $sessionName)
	{
		//$this->savePath = $savePath;
		$this->savePath = dirname(dirname(dirname(dirname(__FILE__)))).DIRECTORY_SEPARATOR."data".DIRECTORY_SEPARATOR."session_pc".DIRECTORY_SEPARATOR;
		if (!is_dir($this->savePath)) {
			mkdir($this->savePath, 0777);
		}

		return true;
	}

	function close()
	{
		return true;
	}

	function read($id)
	{
		$file2 = $this->savePath."$id";
		$str = (string)@file_get_contents($file2);
		if(!file_exists($file2) || $str == '')
		{
			foreach (glob($this->savePath."*_$id") as $file) {
				if(stripos($file,$id) !== false)
				{
					$sid = str_replace($this->savePath, "", $file);
					$str = @file_get_contents($file);
					session_id($sid);
					break;
				}
			}
		}
		return (string)$str;
	}

	function write($id, $data)
	{
		$file = $this->savePath."$id";
		return file_put_contents($file, $data) === false ? false : true;
	}

	function destroy($id)
	{
		$file = $this->savePath."$id";
		if (file_exists($file)) {
			unlink($file);
		}
		$arr = explode("_", $id);
		foreach (glob($this->savePath."$arr[0]_*") as $file) {
			unlink($file);
		}

		return true;
	}

	function gc($maxlifetime)
	{
		foreach (glob($this->savePath."*") as $file) {
			if (filemtime($file) + $maxlifetime < time() && file_exists($file)) {
				unlink($file);
			}
		}

		return true;
	}
}
?>